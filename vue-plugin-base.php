<?php

/**
 * Generated by WP Vue plugin base
 */

if (!defined('ABSPATH')) {
    exit;
}

class VuePluginBase {
	private $scriptsUrlDev;
	private $scriptsUrlProd;
	private $loadScripts;

    public function __construct() {
		add_action('init', [$this, 'load_textdomain']);
        add_action('init', [$this, 'add_post_type'], 0);
        add_action('wp_insert_post', [$this, 'save_post'], 10, 2);
        add_action('add_meta_boxes', [$this, 'add_meta_box']);
		add_action('wp_footer', [$this, 'enqueue_scripts']);
		add_action('admin_footer', [$this, 'enqueue_scripts']);

		add_action('wp_ajax_get_info', [$this, 'get_info']);
		add_action('wp_ajax_nopriv_get_info', [$this, 'get_info']);

        add_shortcode('prefix_shortcode', [$this, 'shortcode_html']);

		$this->scriptsUrlDev = 'http://localhost:8080';
		$this->scriptsUrlProd = plugin_dir_url(__FILE__) . "vue-app";
		$this->loadScripts = ['wp-vue-app-js' => 'js/app.js', 'wp-vue-vendors-js' => 'js/chunk-vendors.js'];
    }

	public function load_textdomain() {
		load_plugin_textdomain('prefix', false, dirname(plugin_basename(__FILE__)) . '/langs'); 
	}

	/**
	 * Include the necessary files to run Vue, based on constant 
	 * WP_ENVIRONMENT_TYPE located in wp-config.php.
	 * If your development is done, run the build script and use 'production'.
	 * During the development, you can use 'local', 'staging' or 'development',
	 * in these cases, you must have the development server running.
	 *
	 * @return void
	 */
	public function enqueue_scripts() {
		global $post;
		$envType = wp_get_environment_type();
		if ($post && $post->post_type == 'prefix_post') {
			if ($envType == 'production') {
				foreach ($this->loadScripts as $sid => $script) {
					wp_register_script($sid, $this->scriptsUrlProd . "/dist/" . $script);
					wp_enqueue_script($sid);
				}
				wp_enqueue_style("vp-vue-css-prod", $this->scriptsUrlProd . "/dist/css/app.css");
			} else {
				foreach ($this->loadScripts as $sid => $script) {
					wp_register_script($sid, $this->scriptsUrlDev . "/" . $script);
					wp_enqueue_script($sid);
				}
			}

			if (!is_admin()) {
				wp_enqueue_script('wp-util');
			}
		}
	}

	/**
	 * Add some values to wpVue variable
	 *
	 * @return string
	 */
	public function get_info() {
		$ret = [
			"pluginDirUrl" => $this->scriptsUrlProd,
			"wpLang" => get_locale(),
			"wpApiSettings" => [
				"root" => esc_url_raw(rest_url()),
				"nonce" => wp_create_nonce('wp_rest')
			]
		];
		wp_send_json_success($ret);
	}

	/**
	 * Prints the wpVue variable, that will be used by Vue app
	 *
	 * @return string
	 */
	private function wp_info() {
		global $post;
		$postId = 0;
		$postTitle = '';
		if (!empty($post->ID)) {
			$postId = $post->ID;
			$postTitle = $post->post_title;
		}
		ob_start();
		?>
		<script>
			// WP-Vue plugin base
			window.wpVue = {
				postId: '<?php print $postId ?>',
				postTitle: '<?php print $postTitle ?>'
			};
			window.addEventListener("load", () => {
				document.querySelector('#show_app').addEventListener('click', () => {
					document.body.classList.add('admin-layout-visible');
				});
				wp.ajax.post('get_info', {}).done(response => {
					window.wpVue = { ...window.wpVue, ...response };
				});
			});
		</script>
		<?php
		return ob_get_clean();
	}

	public function shortcode_html() {
		$info = $this->wp_info();
		$html = '<div id="vue-app" data-type="frontend"></div>';
		return "{$info}\n{$html}";
	}

	public function add_post_type() {
		$labels = array(
			'name'                  => _x('VPB posts', 'Post Type General Name', 'prefix'),
			'singular_name'         => _x('VPB post', 'Post Type Singular Name', 'prefix'),
			'menu_name'             => __('VPB posts', 'prefix'),
			'name_admin_bar'        => __('VPB post', 'prefix'),
			'archives'              => __('VPB post Archives', 'prefix'),
			'attributes'            => __('VPB post Attributes', 'prefix'),
			'parent_item_colon'     => __('Parent VPB post:', 'prefix'),
			'all_items'             => __('All VPB posts', 'prefix'),
			'add_new_item'          => __('Add New VPB post', 'prefix'),
			'add_new'               => __('Add New', 'prefix'),
			'new_item'              => __('New VPB post', 'prefix'),
			'edit_item'             => __('Edit VPB post', 'prefix'),
			'update_item'           => __('Update VPB post', 'prefix'),
			'view_item'             => __('View VPB post', 'prefix'),
			'view_items'            => __('View VPB posts', 'prefix'),
			'search_items'          => __('Search VPB post', 'prefix'),
			'not_found'             => __('Not found', 'prefix'),
			'not_found_in_trash'    => __('Not found in Trash', 'prefix'),
			'featured_image'        => __('Featured Image', 'prefix'),
			'set_featured_image'    => __('Set featured image', 'prefix'),
			'remove_featured_image' => __('Remove featured image', 'prefix'),
			'use_featured_image'    => __('Use as featured image', 'prefix'),
			'insert_into_item'      => __('Insert into item', 'prefix'),
			'uploaded_to_this_item' => __('Uploaded to this item', 'prefix'),
			'items_list'            => __('VPB posts list', 'prefix'),
			'items_list_navigation' => __('VPB posts list navigation', 'prefix'),
			'filter_items_list'     => __('Filter VPB posts list', 'prefix'),
		);
		$args = array(
			'label'                 => __('VPB post', 'prefix'),
			'description'           => __('WP-Vue plugin base post type', 'prefix'),
			'labels'                => $labels,
			'supports'              => array('title', 'editor'),
			'taxonomies'            => array('category', 'post_tag'),
			'hierarchical'          => false,
			'public'                => true,
			'show_ui'               => true,
			'show_in_menu'          => true,
			'menu_position'         => 5,
			'show_in_admin_bar'     => true,
			'show_in_nav_menus'     => true,
			'can_export'            => true,
			'has_archive'           => true,
			'exclude_from_search'   => false,
			'publicly_queryable'    => true,
			'capability_type'       => 'page',
			'show_in_rest'          => true,
		);
		register_post_type('prefix_post', $args);
	}

    public function save_post($post_id, $post) {
		if ($post->post_type != 'prefix_post' || 
			$post->post_status == 'auto-draft' || 
			wp_is_post_autosave($post_id) || 
			wp_is_post_revision($post_id)) {
			return;
		}
		// Force shortcode in posts of type 'prefix_post'
		if (!preg_match("/\[prefix_shortcode\b\s*\/?\]/", $post->post_content)) {
			$post_content = $post->post_content . "\n\n<!-- wp:shortcode -->\n[prefix_shortcode]\n<!-- /wp:shortcode -->\n";
			wp_update_post(["ID" => $post_id, "post_content" => $post_content]);
		}

		// save other post details here
    }

    public function add_meta_box() {
        add_meta_box('prefix_box', __('VPB post', 'prefix'), [$this, 'box_html'], 'prefix_post', 'side');
    }

	public function box_html($post) {
	?>
		<div class="components-panel__row" id="vc-admin-wrapper" style="display: none">
			<button type="button" class="components-button is-secondary" id="show_app">
				<?php _e('Show Vue app', 'prefix'); ?>
			</button>
		</div>
		<div id="vc-admin-error"><?php _e('Something is wrong...', 'prefix'); ?></div>
		<div id="vue-app" data-type="admin" style="display: none"></div>
		<?php print $this->wp_info(); ?>
	<?php
	}
}

global $vue_plugin_base;
$vue_plugin_base = new VuePluginBase();
?>