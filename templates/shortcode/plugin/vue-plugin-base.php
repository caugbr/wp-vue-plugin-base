<?php

/**
 * Generated by WP Vue plugin base
 */

if (!defined('ABSPATH')) {
    exit;
}

class VuePluginBase {
	private $scriptsUrlDev;
	private $scriptsUrlProd;
	private $loadScripts;

    public function __construct() {
		add_action('init', [$this, 'load_textdomain']);
		add_action('wp_footer', [$this, 'enqueue_scripts']);
		add_action('admin_footer', [$this, 'enqueue_scripts']);

		add_action('wp_ajax_get_info', [$this, 'get_info']);
		add_action('wp_ajax_nopriv_get_info', [$this, 'get_info']);

        add_shortcode('prefix_shortcode', [$this, 'shortcode_html']);

		$this->scriptsUrlDev = 'http://localhost:8080';
		$this->scriptsUrlProd = plugin_dir_url(__FILE__) . "vue-app";
		$this->loadScripts = ['wp-vue-app-js' => 'js/app.js', 'wp-vue-vendors-js' => 'js/chunk-vendors.js'];
    }

	public function load_textdomain() {
		load_plugin_textdomain('prefix', false, dirname(plugin_basename(__FILE__)) . '/langs'); 
	}

	/**
	 * Include the necessary files to run Vue, based on constant 
	 * WP_ENVIRONMENT_TYPE located in wp-config.php.
	 * If your development is done, run the build script and use 'production'.
	 * During the development, you can use 'local', 'staging' or 'development',
	 * in these cases, you must have the development server running.
	 *
	 * @return void
	 */
	public function enqueue_scripts() {
		global $post;
		$envType = wp_get_environment_type();
		if ($envType == 'production') {
			foreach ($this->loadScripts as $sid => $script) {
				wp_register_script($sid, $this->scriptsUrlProd . "/dist/" . $script);
				wp_enqueue_script($sid);
			}
			wp_enqueue_style("vp-vue-css-prod", $this->scriptsUrlProd . "/dist/css/app.css");
		} else {
			foreach ($this->loadScripts as $sid => $script) {
				wp_register_script($sid, $this->scriptsUrlDev . "/" . $script);
				wp_enqueue_script($sid);
			}
		}

		if (!is_admin()) {
			wp_enqueue_script('wp-util');
		}
	}

	/**
	 * Add some values to wpVue variable
	 *
	 * @return string
	 */
	public function get_info() {
		$ret = [
			"pluginDirUrl" => $this->scriptsUrlProd,
			"wpLang" => get_locale(),
			"wpApiSettings" => [
				"root" => esc_url_raw(rest_url()),
				"nonce" => wp_create_nonce('wp_rest')
			]
		];
		wp_send_json_success($ret);
	}

	/**
	 * Prints the wpVue variable, that will be used by Vue app
	 *
	 * @return string
	 */
	private function wp_info() {
		global $post;
		$postId = 0;
		$postTitle = '';
		if (!empty($post->ID)) {
			$postId = $post->ID;
			$postTitle = $post->post_title;
		}
		ob_start();
		?>
		<script>
			// WP-Vue plugin base
			window.wpVue = {
				postId: '<?php print $postId ?>',
				postTitle: '<?php print $postTitle ?>'
			};
			window.addEventListener("load", () => {
				wp.ajax.post('get_info', {}).done(response => {
					window.wpVue = { ...window.wpVue, ...response };
				});
			});
		</script>
		<?php
		return ob_get_clean();
	}

	public function shortcode_html() {
		$info = $this->wp_info();
		$html = '<div id="wp-vue-error">' . __('Vue app: something is wrong...', 'prefix') . '</div>';
		$html .= '<div id="vue-app" style="display: none"></div>';
		return "{$info}\n{$html}";
	}
}

global $vue_plugin_base;
$vue_plugin_base = new VuePluginBase();
?>